[["index.html", "High Throughout Genomics Analysis 2021 Workshop Info Schedule Pre-work", " High Throughout Genomics Analysis 2021 Faculty: Mathieu Bourgey, Jared Simpson, Robert Syme, Daniel Poppleton, BF Francis Ouellette, Rachade Hmamouchi Sep 27, 2021 - Sep 29, 2021 Workshop Info Welcome to the 2021 High Throughput Genomics Analysis Canadian Bioinformatics Workshop webpage! Schedule Monday, September 27 Tuesday, September 28 Wednesday, September 29 10:00 Welcome 10:00 Module 3: Lab 10:00 Module 5: Structural Variant Calling 10:15 Module 1: Introduction to Sequencing Technologies &amp; HTS file formats 11:00 Module 5 lab 12:15 Break 12:00 Break 12:00 Break 12:45 Module 2: data vizualization with IGV 12:30 Module 4: Single nucleotide variant Calling 12:30 Module 5 lab 13:45 Break 13:30 Break 13:30 Break 14:45 Module 2 lab 14:30 Module 4 lab 14:30 Module 6: Genome Assembly 15:45 Module 3: Genome Alignment 15:30 Module 6 Lab 16:45 Break 16:30 Break 16:30 Break 17:15 Module 3: Lab 17:00 Module 4 lab 17:00 Module 6 Lab 18:15 17:30 18:00 Survey &amp; Closing Remarks Pre-work You can find your pre-work here. "],["meet-your-faculty.html", "Meet Your Faculty", " Meet Your Faculty Mathieu Bourgey Bioinformatics Manager Canadian Center for Computational Genomic As a Bioinformatics manager of the TechDev unit, Mathieu ensures the integration and the support of new genomics technologies in the platform, and he leads the software development. Prior to joining C3G, Mathieu was the team leader of the Bioinformatics service unit at Genome Quebec. He holds a PhD in Statistical Genetics from University Paris-Sud XI and a Master degree in Genetics from University Pierre-et-Marie-Currie (Paris VI). Jared Simpson Principal Investigator, Ontario Institute for Cancer Research Assistant Prof. Department of Computer Science, University of Toronto Dr. Simpson develops algorithms and software for the analysis of high-throughput sequencing data. He is interested in de novo assembly and the detection of sequence variation in individuals, cancers and populations, with a focus on long read sequencing technologies. Dr. Simpson developed the ABYSS, SGA and nanopolish software packages. Robert Syme Bioinformatics Specialist Canadian Center for Computational Genomics After completing a postdoctoral position in Australia, Rob joins the team as a Bioinformatics consultant specialising in fungal/plant genetics and developing omics resources, strategies, and infrastructure for laboratories working with non-model organisms. He has more than a decade of experience working in genomics, and holds a PhD in bioinformatics from Curtin University. Daniel Poppleton Bioinformatics Consultant Canadian Center for Computational Genomic Daniel recently joined the C3G after completion of a post-doctoral fellowship on mammalian genomics at the Royal Veterinary College in London. He previously worked on bacterial genetics and microbiomes during his doctorate at the Pasteur Institute in Paris. Currently, he contributes through the development of pipelines and the processing of raw data with the team. BF Francis Ouellette Scientific Director Canadian Bioinformatics Workshops (CBW) Montreal, QC, CA francis@bioinformatics.ca Francis was one of the co-founders of the CBW in 1998. His teams over the years have been involved in the development of DNA, RNA and protein sequences analysis methods, as well as the development of platforms to integrate data from various open databases. Since July 2021 Francis is the Executive Director of the Neuro Bioinformatics Core Facility and the TOSI Open Science Officer, both positions at McGill University. Rachade Hmamouchi Program Manager Canadian Bioinformatics Workshops (CBW) Montreal, QC, CA rachade@bioinformatics.ca As a Program Manager, Rachade is leading the organization of current workshop series as well as the development of new ones. She contributes to the development and implementation of promotional strategies too. Rachade has a background in bioinformatics and project management, working in academic and industrial research. She holds an M.Sc. degree in bioinformatics and data analysis from the University of Geneva. "],["data-and-compute-setup.html", "Data and Compute Setup Course data downloads Compute setup", " Data and Compute Setup Course data downloads Coming soon! Compute setup AWS and Unix Intro Connecting and Properly Using a Cloud Computring Cluster at the CBW By Jose Hecter Galvez, Zhibin Lu, and Rob Syme Schedule: Day 1 10:00 Welcome Introduction (Rachade) 10:10 Module 0 : AWS EC2 instance (Zhibin) 10:40 Module 1: Logging into AWS (group split into Windows and Mac/Linux) 11:10 Break 11:15 Module 2: Introduction to the UNIX Command Line (Hector) 11:35 Module 3: File Manipulation 12:05 Break 13:05 Module 4: Searching and Sorting Through Files (Rob) 14:00 Break 14:05 Module 5: Shell scripts (Rob) 15:00 1. Logging into AWS Description of the lab: This section will show students how to login to AWS and create an instance Once you have confirmed your account as per the email (subject line “You have been invited to join an AWS Educate Classroom”), you can log in here: www.awseducate.com 2. Introduction to the Command Line Description of the lab: This section will show students the basics of the command line, with a focus on navigation. Exercise: Exploring the filesystem Connect to your AWS instance Type the ls command, what do you see? Solution (click here) $ ls CourseData R cvmfs_cache workspace The ls command lists the contents of a working directory. After following the tutorial, can you answer what these commands (cd, pwd) do? Solution (click here) The cd command is used to change directories. Without arguments, it will move to the home directory (~) The pwd command shows the absolute path to the working directory. 3. File Manipulation Description of the lab: This section will show students how to manipulate files, including reading, editing, and renamming text files. Additional material: Here are two cheat-sheets that can be usedful to have as a reference for common UNIX/Linux commands: FOSSwire.com Unix/Linux Command Reference SUSO.org Unix/Linux Command Syntax and Reference Excercise: Reading Text Files What do the commands cat, head, and tail do? What do they have in common? Solution (click here) All three of these commands ouptut the contents of a text file to standard out: - cat outputs the full contents of the file - head outputs the first 10 lines of a file - tail outputs the last 10 lines of a file What does the command less do? How is it different from cat? Solution (click here) less opens a text file for viewing. Unlike cat, it will display it in a separate file viewer. How can you know the number of lines in a file? Solution (click here) The command wc -l will display the number of lines in a file. wc (word count) displays the number of words, lines, and bytes in a file. The -l option, limits the output to lines. Excercise: Editing Text Files Write “Hello world” into a file called helloworld.txt using nano. Save and then exit. Solution (click here) First, use the nano command to open a file called helloworld.txt $ nano helloworld.txt Inside the nano editor, write “Hello world” and then use the ^O option to write the changes and then ^X to exit. Create a subdirectory called test. Then, move the helloworld.txt file into the directory. Solution (click here) First, use the command mkdir to create this new directory. Then, use mv to move helloworld.txt into this directory. $ mkdir test $ mv helloworld.txt test/ Create a copy of the helloworld.txt file called helloworld2.txt, inside the test directory. Solution (click here) First, change the working directory using cd, then use the cp command to create the copy. $ cd test $ cp helloworld.txt helloworld2.txt 4. Searching and Sorting Files Description of the lab: This section will show students how to search for files and in files. Workshop notes and quiz questions here. 5. Putting it all Together Description of the lab: This section will show students how the basic concepts fit together and in the context of bioinformatics. Workshop notes and quiz questions here. 6. AWS Machine Image (AMI) Starting the AWS AMI after the workshop is over: An updated AWS Machine Image (AMI) will be be prepred by Zhibin at the end of this CBW workshop: It will have the same software used in the workshop, but it will not contain any of the data. To get such an image started, you will need to set up your own AWS account with your own credit card, and then, the same as you did in this workshop, look for the CBW AMI, and start that with your own project. Launching the AMI "],["module-1-introduction.html", "Module 1: Introduction Lecture", " Module 1: Introduction Lecture Introduction to Sequencing Technologies Introduction to HTS File Formats "],["module-2-data-visualization-with-igv.html", "Module 2: Data Visualization with IGV Lecture Lab Lab Answers", " Module 2: Data Visualization with IGV Lecture Lab This lab was created by Sorana Morrissy, then modified by Florence Cavalli, Heather Gibling, and Rob Syme. Introduction Description of the lab Welcome to the lab for Genome Visualization! This lab will introduce you to the Integrative Genomics Viewer, a powerful desktop application for viewing many kinds of genomic data, including data for DNA sequencing, RNA sequencing, microarrays, epigenetics, and copy number alteration. It is one of the most popular visualization tools for high throughput sequencing (HTS) data. After this lab, you will be able to: Visualize a variety of genomic data Very quickly navigate around the genome Visualize HTS read alignments Validate SNP calls and structural re-arrangements by eye Things to know before you start: The lab may take between 1-2 hours, depending on your familiarity with genome browsing. Don’t worry if you don’t complete the lab! It is available for you to complete later. There are a few thought-provoking Questions or Notes pertaining to sections of the lab. These are optional, and may take more time, but are meant to help you better understand the visualizations you are seeing. Requirements Integrative Genomics Viewer Ability to run Java Compatibility This tutorial was intended for IGV v2.3 or higher, which is available on the Download page. It is strongly recommended that you use one of these versions, as older versions may not be compatible. If you have installed a former version, please uninstall it and install the latest version. Data Set for IGV Chromosome 21:19,000,000-20,000,000 HCC1143.normal.21.19M-20M.bam HCC1143.normal.21.19M-20M.bam.bai Visualization Part 1: Getting Familiar with IGV We will be visualizing read alignments using the Integrative Genomics Viewer. First, lets familiarize ourselves with it. The IGV Interface Load a Genome and Data Tracks By default, IGV loads Human hg19 as the reference genome. If you work with another version of the human genome, or another organism altogether, you can change the genome by clicking the drop down menu in the upper-left. For this lab, we’ll be using Human hg19. We will also load additional tracks from Server (File -&gt; Load from Server): Ensembl genes (or your favourite source of gene annotations) GC Percentage dbSNP 1.4.7 Note If you are using a computer with low memory, only load the gene annotations. Navigation You should see listing of chromosomes in this reference genome. Click on 1, for chromosome 1. Navigate to chr1:10,000-11,000 by entering this into the location field (in the top-left corner of the interface) and clicking Go or pressing Enter/Return on your keyboard. This shows a window of chromosome 1 that is 1,000 base pairs wide and beginning at position 10,000. IGV displays the sequence of letters in a genome as a sequence of colours (e.g. A = green). This makes repetitive sequences, like the ones found at the start of this region, easy to identify. You can navigate to a gene of interest by typing it in the same box the genomic coordinates are in and pressing Enter/Return. Try it for your favourite gene, or BRCA1 if you can’t decide. Genes are represented as lines and boxes. Lines represent intronic regions, and boxes represent exonic regions. The arrows indicate the strand on which the gene lies. When loaded, tracks are stacked on top of each other. You can identify which track is which by consulting the label to the left of each track. Region Lists Sometimes it’s really useful to save where you are, or to load regions of interest. For this purpose, there is a Region Navigator in IGV. To access it, click Regions &gt; Region Navigator. While you browse around the genome, you can save some bookmarks by pressing the Add button at any time. Loading Read Alignments We will visualize alignments from the breast cancer cell line HCC1143. For speed, only a small portion of chr21 will be loaded (19M:20M). HCC1143 Alignments to hg19: HCC1143.normal.21.19M-20M.bam HCC1143.normal.21.19M-20M.bam.bai Note These are the same files listed at the top of tutorial. Copy the files to your local drive, and in IGV choose File &gt; Load from File, select the bam file, and click OK. Note that the bam and index files must be in the same directory for IGV to load these properly, but only the bam file (not the bam.bai file) needs to be loaded into IGV. Visualizing Read Alignments Navigate to a narrow window on chromosome 21: “chr21:19,480,041-19,480,386”. IGV lets you group, sort, and color alignments to better visualize the data. To start our exploration, right click on the track name, and select the following options: Sort alignments by “start location” Group alignments by “pair orientation” Experiment with the various settings by right clicking the read alignment track and toggling the options. Think about which would be best for specific tasks (e.g. quality control, SNP calling, CNV finding). You will see reads represented by grey or white bars stacked on top of each other, where they were aligned to the reference genome. The reads are pointed to indicate their orientation (i.e. the strand on which they are mapped). Individual bases are only colored if they are a mismatch to the reference. The transparacy of the mismatched bases corresponds to the base quality. Mouse over any read and notice that a lot of information is available. To toggle read display from “hover” to “click”, select the yellow box at the top of the window and change the setting. Once you select a read, a pop-up window shows quality metrics and other information about that read. Visualization Part 2: Inspecting SNPs, SNVs, and SVs In this section we will be looking in detail at 8 positions in the genome, and determining whether they represent real events or artifacts. Neighbouring Somatic SNV and Germline SNP Navigate to position “chr21:19,479,237-19,479,814” Center on the SNV indicated by the red and blue coloring in the coverage track. You can center by clicking on the alignments and dragging them left or right until the SNV lines up with the black center line. (If the center line isn’t visible, turn it on by going to View -&gt; Preferences -&gt; Alignments -&gt; Show center line). You can also type “chr21:19,478,749-19,479,891” into the navigation bar to center on the SNV. Sort alignments by “base” Color alignments by “read strand”. Red reads are in the forward orientation, and blue reads are in the reverse orientation. Note High base qualities in all reads except one (where the alt allele is the last base of the read) Good mapping quality of reads, no strand bias, allele frequency consistent with heterozygous mutation Questions: What does “Shade base by quality” do? How might this be helpful? How does “Color by read strand” help? Homopolymer Repeat with Indel Navigate to position “chr21:19,518,412-19,518,497” Group alignments by “read strand” Drag and center on the second set of “T”s Sort alignments by “base” Questions: Is the “T” likely a valid SNV? What evidence suggests it is or isn’t? Now center on the one base deletion indicated by broken reads with black lines. You may have to scroll down to find these reads. Sort alignments by “base” Note The alt allele is either a deletion or insertion of one or two “T”s You can see the inserted “T”s by clicking on or hovering over (depending on your settings) the purple “I”s that indicate insertions The remaining bases are mismatched, because the alignment is now out of sync (Using an older version of dbSNP (1.3.1) the entry at this location (rs74604068) is an A-&gt;T, and in all likelihood an artifact i.e. the common variants included some cases that are actually common misalignments caused by repeats. This is getting better; this entry is not present anymore in dbSNP 1.4.7!) Coverage by GC Navigate to position “chr21:19,611,925-19,631,555” Note that the range contains areas where coverage drops to zero in a few places. Use Collapsed view Color alignments by “insert size” Load GC track (if not loaded already; File -&gt; Load from Server -&gt; Annotations -&gt; Sequence and Regulations -&gt; GC Percentage) Question: Does the coverage correspond to the GC content Heterozygous SNPs on Different Alleles Navigate to region “chr21:19,666,833-19,667,007” Center on the first SNV (green) Remove grouping by read strand and set to “none” Sort by base Note Both SNV positions are spanned by single reads, but reads only have either one or the other, indicating that they are on different haplotypes Low Mapping Quality Navigate to region “chr21:19,800,320-19,818,162” Use Collapsed view Load repeat track (from Load from Server) Note Mapping quality plunges in several reads (white instead of grey). Once we load repeat elements, we see that these reads align with two LINE elements Question Why do LINE elements affect mapping quality Homozygous Deletion Navigate to region “chr21:19,324,469-19,331,468” Sort reads by insert size Some read pairs are colored red and blue. This is different from “Color by read strand”. Red read pairs correspond to insert sizes that are larger than expected, and blue read pairs correspond to insert sizes that are smaller than expected. Larger (red) insert sizes can be indicative of a deletion Smaller (blue) insert sizes can be indicative of an insertion This is well explained here Turn on “View as Pairs” and “Expanded” view Click on a red read pair to pull up information on alignments Note Typical insert size of read pair in the vicinity: 350bp New insert size of red read pairs: 2,875bp This corresponds to a homozygous deletion of 2.5kb Question What other track provides evidence of a deletion at this location? Mis-Alignment Navigate to region “chr21:19,102,154-19,103,108” Turn on “View as Pairs” and “Expanded” view Group alignments by “Pair orientation” Color alignments by “Insert size and pair orientation” “Insert size” also colors reads when a mate is mapped to a different chromosome. Each chromosome has its own color, as described here Note This is a position where an AluY element causes mis-alignment Misaligned reads have several mismatches to the reference and Well-aligned reads have partners on other chromosomes where additional AluY elements are encoded. You may need to scroll down to see this reads Translocation Navigate to region “chr21:19,089,694-19,095,362” Expanded view Group by “Pair orientation” Color alignments by “Insert size and pair orientation” “Pair orientation” colors read pairs when they are not in the expected left-right (LR) orientation. This is well explained here Note Many reads with mismatches to reference Read pairs in RL pattern (instead of LR pattern) Region is flanked by reads with poor mapping quality (white instead of grey) Presence of reads with pairs on other chromosomes (coloured reads at the bottom when scrolling down) Visualization Part 3: Automating Tasks in IGV (Optional) We can use the Tools menu to invoke running a batch script. Using a batch script, you can automatically load your data, go to a particular location, set some display options and take a snapshot. This can be useful when you want to inspect many variant calls. Batch scripts are described on the IGV website: Batch file requirements Commands recognized in a batch script We also need to provide a sample attribute file as described here. Download the batch script and the attribute file for our dataset: Batch script: Run_batch_IGV_snapshots_example.txt Attribute file: igv_HCC1143_attributes.txt After downloading those two files, open Run_batch_IGV_snapshots_example.txt in a text editor and update the paths for the bam file and the output directory (indicated as **** in the file) to your directories. The batch script will not run if these paths are not updated because these default directories do not exist on your computer. Now run the file from the Tools menu: Tools -&gt; Run Batch Script Select Run_batch_IGV_snapshots_example.txt and click Open. IGV will automatically switch to thse regions specified in the batch script. Wait until the cursor returns to an arrow to use IGV again. The IGV screenshots are in the screenshots output directory you set. Have a look! Visualization Part 4: Visualizing Long Reads Long reads aligned to a reference genome can be visualized like short reads, but true variants might be hard to find among the noise from increased sequencing error rates in long-read sequencing technologies. We will view some reads obtained from Oxford Nanopore sequencing provided by Miten Jain from the recent publication Nanopore sequencing and assembly of a human genome with ultra-long reads. Before getting started, remove the tracks for HCC1143.normal.21.19M-20M.bam (both the alignment track and the coverage track). We will be using a different reference genome, so these reads will no longer be properly aligned. Change the reference genome in the top left corner to Human (hg38). If this option isn’t available you will need to download it. Selct More, then scroll down and select Human hg38. Data for long reads: Chromosome 21: 19,000,000-20,000,000 NA12878.21.19M-20M.bam NA12878.21.19M-20M.bam.bai Copy the files to your local drive, and in IGV choose File &gt; Load from File, select the bam file, and click OK. Note that the bam and index files must be in the same directory for IGV to load these properly, but only the bam file (not the bam.bai file) needs to be loaded into IGV. Cleaning up Sequencing Error Noise Navigate to position “chr21:19,479,237-19,479,814” Load the Common SNPs track from server (File -&gt; Load from Server -&gt; Annotations -&gt; Common Snps 1.4.2) Question: What does the abundance of dashed lines and purple “I”s tell us about the types of errors produced by nanopore sequencing? Hide small indels to better view the alignments: Go to View -&gt; Preferences -&gt; Alignments and enter a small number for Hide indels &lt; (e.g., 20) Most of the indels should now be removed. Generate a consensus sequence to hide substitution errors: Go View -&gt; Preferences -&gt; Alignments and select Quick consensus mode Viewing Variants Scroll around and see if you can find a plausible SNV. What information are you using as evidence for this SNV? Now navigate to position “chr21:19,790,758-19,790,965” Note The reads here all have a deletion indicated by thin black bars splitting up parts of the reads. It would seem as though this is evidence for a deletion in this sample at this position However, look at the reference sequence at the deletion–it is all red, indicating “T”s! You can zoom in to confirm Nanopore sequencing is prone to deletions at homopolymer repeats, or stretches of a single base, as seen here. Therefore this is likely a sequencing artifact and not a true deletion Question: Some of the coloring options we used for viewing the previous sample (HCC1143) are not available for this NA12878 bam, such as View as pairs and Color alignments by insert size and pair orientation. Why is this? Lab Complete! You’re done Module 2! We hope that you enjoyed the lab and that you continue to enjoy IGV. Resources Suggested answers to the questions from this lab IGV user manual Lab Answers Suggested Answers Below are suggested answers to the questions from lab 2. You might have thought of additional reasons and answers! Visualization Part 2: Inspecting SNPs, SNVs, and SVs Neighbouring Somatic SNV and Germline SNP Questions: What does “Shade base by quality” do? How might this be helpful? Distinguishes high-quality bases from lower quality bases. If the T alternate allele was predominantly light/transparent, we wouldn’t be very confident that it is a probable SNV. The only light-colored T in this example is at the very end of a read, where base quality is generally lower. How does “Color by read strand” help? Lets us see that the T alternate allele is present on both forward and reverse sequencing reads. If it was present on only forward reads or only reverse reads, that could indicate a sequencing artifact as opposed to a probable SNV. Homopolymer Repeat with Indel Question: Is the “T” likely a valid SNV? What evidence suggests it is or isn’t? Probably not. 6/36 reads show a T at this positition (numbers obtained by clicking/hovering on the coverage track block at this position), and 4 of those 6 are light colored (low quality). Additionally, only forward (red) reads have the T alternate allele, indicating a strand bias sequencing error. Coverage by GC Question: Does the coverage correspond to the GC content? Yes! Read coverage is low where GC content of the reference genome is very low (and also very high, but in these data the low coverage effect is easier to see). Seqeuencing technologies are not perfect and have biases, meaning not all regions of the genome are covered equally. You can read more about the effect of GC content on short-read sequencing coverage here. Low Mapping Quality Question: Why do LINE elements affect mapping quality? LINEs (long interspersed nuclear elements) are retrotransposons found throughout the genome. Because these sequences are repeated in many different locations, when a read aligns to part of this sequence, it can often map equally well to multiple locations in the genome. This is not helpful, so aligners generally give low mapping quality scores reads that do not map uniquely to one location (i.e. 0; the reads will also be white instead of grey in IGV). Homozygous Deletion Question: What other track provides evidence of a deletion at this location? The coverage track drops down to zero at the same location as the gap in sequencing reads. Visualization Part 4: Visualizing Long Reads Cleaning up Sequencing Error Noise Question: What does the abundance of dashed lines and purple “I”s tell us about the types of errors produced by nanopore sequencing? Nanopore sequencing is prone to insertions and deletions. “I”s are insertions and the dashed lines are deletions, relative to the reference genome. Viewing Variants Question: Some of the coloring options we used for viewing the previous sample (HCC1143) are not available for this NA12878 bam, such as View as pairs and Color alignments by insert size and pair orientation. Why is this? Nanopore sequencing doesn’t do paired read sequencing! Instead, long fragments of DNA are pulled through pores and are sequenced until the end of the fragment (or until the pore wears out). Reads are considered to be independent from each other in this regard. This is different from short-read sequencing platforms like Illumina that sequence both ends of a DNA fragment but are usually unable to sequence the middle segment. "],["module-3.html", "Module 3 Lecture Lab", " Module 3 Lecture Lab Created by Mathieu Bourgey, Ph.D Introduction This workshop will show you how to launch individual first steps of a DNA-Seq pipeline We will be working on a 1000 genome sample, NA12878. You can find the whole raw data on the 1000 genome website: http://www.1000genomes.org/data NA12878 is the child of the trio while NA12891 and NA12892 are her parents. Mother Father Child NA12892 NA12891 NA12878 If you finish early, feel free to perform the same steps on the other two individuals: NA12891 &amp; NA12892. For practical reasons we subsampled the reads from the sample because running the whole dataset would take way too much time and resources. We’re going to focus on the reads extracted from a 300 kbp stretch of chromosome 1. Chromosome Start End 1 17704860 18004860 Original Setup Software Requirements These are all already installed, but here are the original links. BVATools SAMTools BWA Genome Analysis ToolKit Trimmomatic Environment setup Launching the container mkdir -p $HOME/workspace/HTG/Module3/ docker run --privileged -v /tmp:/tmp --network host -it -w $PWD -v $HOME:$HOME \\ --user $UID:$GROUPS -v /etc/group:/etc/group -v /etc/passwd:/etc/passwd \\ -v /etc/fonts/:/etc/fonts/ -v /media:/media c3genomics/genpipes:0.8 Variable Assignment export WORK_DIR_M3=$HOME/workspace/HTG/Module3/ export REF=$MUGQIC_INSTALL_HOME/genomes/species/Homo_sapiens.GRCh37/ Setup mkdir -p $WORK_DIR_M3 cd $WORK_DIR_M3 ln -s $HOME/CourseData/HTG_data/Module3/* . Modules To verify your environment setup: module avail module list Data Files The initial structure of your folders should look like this: ROOT |-- raw_reads/ # fastqs from the center (down sampled) `-- NA12878/ # Child sample directory `-- NA12891/ # Father sample directory `-- NA12892/ # Mother sample directory `-- scripts/ # command lines scripts `-- saved_results/ # precomputed final files `-- adapters.fa # fasta file containing the adapter used for sequencing` Cheat Sheets Unix command line cheat sheet Commands file of this module First Data Glance So you’ve just recieved an email saying that your data is ready for download from the sequencing center of your choice. 1. What should you do? Solution (click here) The first thing to do is to download it. The second thing is making sure it is of good quality. FASTQ Files Let’s first explore the FASTQ file. Try these commands. less -S raw_reads/NA12878/NA12878_CBW_chr1_R1.fastq.gz These are FASTQ files. 1. Could you describe the FASTQ format? Solution (click here) There is four lines for each read: - Header 1 - DNA sequence - Header 2 - Quality values zcat raw_reads/NA12878/NA12878_CBW_chr1_R1.fastq.gz | head -n4 zcat raw_reads/NA12878/NA12878_CBW_chr1_R2.fastq.gz | head -n4 2. What was special about the output and why was it like like? Solution (click here) It’s the same header with a /1 or /2 towards the end. Meaning these are paired data. You could also count the reads. zgrep -c &quot;^@SN1114&quot; raw_reads/NA12878/NA12878_CBW_chr1_R1.fastq.gz We found 56512 reads. 3. Why shouldn’t you just do? zgrep -c &quot;^@&quot; raw_reads/NA12878/NA12878_CBW_chr1_R1.fastq.gz Solution (click here) Because the ASCII quality character has @ as a valid value. If the quality line starts with this character you’ll count it as a read. By this method 82325 counts are found! Quality We can’t look at all the reads. Especially when working with whole genome 30x data. You could easilly have Billions of reads. Tools like FastQC and BVATools readsqc can be used to plot many metrics from these data sets. Let’s look at the data: mkdir -p originalQC/NA12878/ java -Xmx1G -jar ${BVATOOLS_JAR} readsqc \\ --read1 raw_reads/NA12878/NA12878_CBW_chr1_R1.fastq.gz \\ --read2 raw_reads/NA12878/NA12878_CBW_chr1_R2.fastq.gz \\ --threads 2 --regionName ACTL8 --output originalQC/NA12878/ Open the images 1. What stands out in the graphs? Solution (click here) Of the raw data we see that: Some reads have 3’ ends. All the generated graphics have their uses. This being said, 2 of them are particularly useful to get an overal picture of how good or bad a run went. These are the Quality box plots and the nucleotide content graphs. The Box plot shows the quality distribution of your data. The Graph goes &gt; 100 because both ends are appended one after the other. The quality of a base is computated using the Phread quality score. The formula outputs an integer that is encoded using an ASCII table. The way the lookup is done is by taking the the phred score adding 33 and using this number as a lookup in the table. The Wikipedia entry for the FASTQ format has a summary of the varying values. Older illumina runs were using phred+64 instead of phred+33 to encode their fastq files. Trimming After this careful analysis of the raw data we see that Some reads have bad 3’ ends. No read has adapter sequences in it. Although nowadays this doesn’t happen often, it does still happen. In some cases, miRNA, it is expected to have adapters. Since they are not part of the genome of interest they should be removed if enough reads have them. To be able to remove adapters and low qualtity bases, we will use Trimmomatic. The adapter file is already in your reference folder. We can look at the adapters cat adapters.fa 1. Why are there 2 different ones? Solution (click here) Because both ends of the fragment don’t have the same adapter. Let’s try removing them and see what happens. mkdir -p reads/NA12878/ java -Xmx2G -cp $TRIMMOMATIC_JAR org.usadellab.trimmomatic.TrimmomaticPE -threads 2 -phred33 \\ raw_reads/NA12878/NA12878_CBW_chr1_R1.fastq.gz \\ raw_reads/NA12878/NA12878_CBW_chr1_R2.fastq.gz \\ reads/NA12878/NA12878_CBW_chr1_R1.t20l32.fastq.gz \\ reads/NA12878/NA12878_CBW_chr1_S1.t20l32.fastq.gz \\ reads/NA12878/NA12878_CBW_chr1_R2.t20l32.fastq.gz \\ reads/NA12878/NA12878_CBW_chr1_S2.t20l32.fastq.gz \\ ILLUMINACLIP:adapters.fa:2:30:15 TRAILING:20 MINLEN:32 \\ 2&gt; reads/NA12878/NA12878.trim.out cat reads/NA12878/NA12878.trim.out 2. What does Trimmomatic says it did? Solution (click here) Of the 56512 input pairs: 99.92% were kept - 0.06% had only a valid read1 - 0.02% had only a valid read2 - None were fully discarded Let’s look at the graphs now mkdir -p postTrimQC/ java -Xmx1G -jar ${BVATOOLS_JAR} readsqc \\ --read1 reads/NA12878/NA12878_CBW_chr1_R1.t20l32.fastq.gz \\ --read2 reads/NA12878/NA12878_CBW_chr1_R2.t20l32.fastq.gz \\ --threads 2 --regionName ACTL8 --output postTrimQC/ ** 3. How does it look now?** Solution (click here) It looks better, but there is still some medium-low quality bases that remain. ** 4. Could we have done a better job?** Solution (click here) A sliding windows approach would have been more efficient in this case but it comes with the cost of losing more reads (92% both survived) Raw: Trailing: &lt;img src=“./img/TR_trim_res.png” width=“1000” alt=“Trimming Sliding windows: Alignment The raw reads are now cleaned up of artefacts we can align the read to the reference. In case you have multiple readsets or library you should align them separately! 1. Why should this be done separately? solution mkdir -p alignment/NA12878/ bwa mem -M -t 2 \\ -R &#39;@RG\\tID:NA12878\\tSM:NA12878\\tLB:NA12878\\tPU:runNA12878_1\\tCN:Broad Institute\\tPL:ILLUMINA&#39; \\ $REF/genome/bwa_index/Homo_sapiens.GRCh37.fa \\ reads/NA12878/NA12878_CBW_chr1_R1.t20l32.fastq.gz \\ reads/NA12878/NA12878_CBW_chr1_R2.t20l32.fastq.gz \\ | java -Xmx2G -jar ${GATK_JAR} SortSam \\ -I /dev/stdin \\ -O alignment/NA12878/NA12878.sorted.bam \\ -SO coordinate \\ --CREATE_INDEX true --MAX_RECORDS_IN_RAM 500000 2. Why is it important to set Read Group information? solution The details of the fields can be found in the SAM/BAM specifications Here For most cases, only the sample name, platform unit and library one are important. 3. Why did we pipe the output of one to the other? Could we have done it differently? solution Lane Merging (Optional) In case we generate multiple lane of sequencing or mutliple library. It is not practical to keep the data splited and all the reads should be merge into one massive file. Since we identified the reads in the BAM with read groups, even after the merging, we can still identify the origin of each read. SAM/BAM Let’s spend some time to explore bam files. Try samtools view alignment/NA12878/NA12878.sorted.bam | head -n4 Here you have examples of alignment results. A full description of the flags can be found in the SAM specification. Try using picards explain flag site to understand what is going on with your reads. The flag is the 2nd column. 1. What do the flags of the first 4 reads mean? solution Let’s take the 3nd one and find it’s pair. Try samtools view alignment/NA12878/NA12878.sorted.bam | grep &quot;1313:19317:61840&quot; 2. Why did searching one name find both reads? solution You can use samtools to filter reads as well. # Say you want to count the *un-aligned* reads, you can use samtools view -c -f4 alignment/NA12878/NA12878.sorted.bam # Or you want to count the *aligned* reads you, can use samtools view -c -F4 alignment/NA12878/NA12878.sorted.bam 3. How many reads mapped and unmapped were there? solution Another useful bit of information in the SAM is the CIGAR string. It’s the 6th column in the file. This column explains how the alignment was achieved. M == base aligns but doesn’t have to be a match. A SNP will have an M even if it disagrees with the reference. I == Insertion D == Deletion S == soft-clips. These are handy to find un removed adapters, viral insertions, etc. An in depth explanation of the CIGAR can be found here The exact details of the cigar string can be found in the SAM spec as well. Another good site Cleaning up Alignments We started by cleaning up the raw reads. Now we need to fix and clean some alignments. Indel realignment The first step for this is to realign around indels and snp dense regions. The Genome Analysis toolkit has a tool for this called IndelRealigner. It basically runs in 2 steps 1 - Find the targets 2 - Realign them. #switch to old GATK 3.8 module unload mugqic/GenomeAnalysisTK/4.1.0.0 module load mugqic/GenomeAnalysisTK/3.8 java -Xmx2G -jar ${GATK_JAR} \\ -T RealignerTargetCreator \\ -R $REF/genome/Homo_sapiens.GRCh37.fa \\ -o alignment/NA12878/realign.intervals \\ -I alignment/NA12878/NA12878.sorted.bam \\ -L 1 java -Xmx2G -jar ${GATK_JAR} \\ -T IndelRealigner \\ -R $REF/genome/Homo_sapiens.GRCh37.fa \\ -targetIntervals alignment/NA12878/realign.intervals \\ -o alignment/NA12878/NA12878.realigned.sorted.bam \\ -I alignment/NA12878/NA12878.sorted.bam #return to GATK 4 module unload mugqic/GenomeAnalysisTK/3.8 module load mugqic/GenomeAnalysisTK/4.1.0.0 1. How many regions did it think needed cleaning? solution Mark Duplicates As the step says, this is to mark duplicate reads. 2. What are duplicate reads? solution 3. What are they caused by? solution 4. What are the ways to detect them? solution Here we will use the GATK approach: java -Xmx2G -jar ${GATK_JAR} MarkDuplicates \\ --REMOVE_DUPLICATES false --CREATE_INDEX true \\ -I alignment/NA12878/NA12878.realigned.sorted.bam \\ -O alignment/NA12878/NA12878.sorted.dup.bam \\ --METRICS_FILE=alignment/NA12878/NA12878.sorted.dup.metrics We can look in the metrics output to see what happened. less alignment/NA12878/NA12878.sorted.dup.metrics 5. How many duplicates were there? solution This is very low, we expect in general &lt;2%. Note it computed the metrics for each library. 6. Why is this important to do it by library and not to combine everything? solution Recalibration This is the last BAM cleaning up step. The goal for this step is to try to recalibrate base quality scores. The vendors tend to inflate the values of the bases in the reads. Also, this step tries to lower the scores of some biased motifs for some technologies. It runs in 2 steps, 1 - Build covariates based on context and known snp sites 2 - Correct the reads based on these metrics java -Xmx2G -jar ${GATK_JAR} BaseRecalibrator \\ -R ${REF}/genome/Homo_sapiens.GRCh37.fa \\ --known-sites ${REF}/annotations/Homo_sapiens.GRCh37.dbSNP150.vcf.gz \\ -L 1:17704860-18004860 \\ -O alignment/NA12878/NA12878.sorted.dup.recalibration_report.grp \\ -I alignment/NA12878/NA12878.sorted.dup.bam java -Xmx2G -jar ${GATK_JAR} ApplyBQSR \\ -R ${REF}/genome/Homo_sapiens.GRCh37.fa \\ -bqsr alignment/NA12878/NA12878.sorted.dup.recalibration_report.grp \\ -O alignment/NA12878/NA12878.sorted.dup.recal.bam \\ -I alignment/NA12878/NA12878.sorted.dup.bam Extract Metrics Once your whole bam is generated, it’s always a good thing to check the data again to see if everything makes sense. Compute coverage If you have data from a capture kit, you should see how well your targets worked. Both GATK and BVATools have depth of coverage tools. We wrote our own in BVAtools because GATK was deprecating theirs -GATK’s is very slow We were missing some output that we wanted from the GATK’s one (GC per interval, valid pairs, etc) Here we’ll use the GATK one #switch to old GATK 3.8 module unload mugqic/GenomeAnalysisTK/4.1.0.0 module load mugqic/GenomeAnalysisTK/3.8 java -Xmx2G -jar ${GATK_JAR} \\ -T DepthOfCoverage \\ --omitDepthOutputAtEachBase \\ --summaryCoverageThreshold 10 \\ --summaryCoverageThreshold 25 \\ --summaryCoverageThreshold 50 \\ --summaryCoverageThreshold 100 \\ --start 1 --stop 500 --nBins 499 -dt NONE \\ -R ${REF}/genome/Homo_sapiens.GRCh37.fa \\ -o alignment/NA12878/NA12878.sorted.dup.recal.coverage \\ -I alignment/NA12878/NA12878.sorted.dup.recal.bam \\ -L 1:17700000-18100000 #return to GATK 4 module unload mugqic/GenomeAnalysisTK/3.8 module load mugqic/GenomeAnalysisTK/4.1.0.0 #### Look at the coverage less -S alignment/NA12878/NA12878.sorted.dup.recal.coverage.sample_interval_summary Coverage is the expected ~30x. summaryCoverageThreshold is a usefull function to see if your coverage is uniform. Another way is to compare the mean to the median. If both are almost equal, your coverage is pretty flat. If both are quite different, that means something is wrong in your coverage. Insert Size java -Xmx2G -jar ${GATK_JAR} CollectInsertSizeMetrics \\ -R ${REF}/genome/Homo_sapiens.GRCh37.fa \\ -I alignment/NA12878/NA12878.sorted.dup.recal.bam \\ -O alignment/NA12878/NA12878.sorted.dup.recal.metric.insertSize.tsv \\ -H alignment/NA12878/NA12878.sorted.dup.recal.metric.insertSize.histo.pdf \\ --METRIC_ACCUMULATION_LEVEL LIBRARY #look at the output less -S alignment/NA12878/NA12878.sorted.dup.recal.metric.insertSize.tsv 1. What is the insert size and the corresponding standard deviation? solution 2. Is the insert-size important? solution Alignment metrics For the alignment metrics, we used to use samtools flagstat but with bwa mem since some reads get broken into pieces, the numbers are a bit confusing. You can try it if you want. We prefer the GATK way of computing metrics java -Xmx2G -jar ${GATK_JAR} CollectAlignmentSummaryMetrics \\ -R ${REF}/genome/Homo_sapiens.GRCh37.fa \\ -I alignment/NA12878/NA12878.sorted.dup.recal.bam \\ -O alignment/NA12878/NA12878.sorted.dup.recal.metric.alignment.tsv \\ --METRIC_ACCUMULATION_LEVEL LIBRARY #### explore the results less -S alignment/NA12878/NA12878.sorted.dup.recal.metric.alignment.tsv 3. What is the percent of aligned reads? solution Investigating the Trio (Optional) At this point we have aligned and called variants in one individual. However, we actually have FASTQ and BAM files for three family members (mother and father)! As additional practice, perform the same steps for the other two individuals (her parents): NA12891 and NA12892. Quit working node Environment exit Summary In this lab, we aligned reads from the sample NA12878 to the reference genome GRCh37: We became familiar with FASTQ and SAM/BAM formats. We checked read QC with BVAtools. We trimmed unreliable bases from the read ends using Trimmomatic. We aligned the reads to the reference using BWA. We sorted the alignments by chromosome position using GATK. We realigned short indels using GATK. We fixed mate issues using GATK. We recalibrate the Base Quality using GATK. We generate alignment metrics using GATK. Lab Complete! You’re done Module 3! We hope that you enjoyed the lab and that you continue to enjoy Genome Alignment. "],["module-4-single-nucleotide-variant-calling.html", "Module 4: Single Nucleotide Variant Calling Lecture Lab", " Module 4: Single Nucleotide Variant Calling Lecture Lab Created by Michael Stromberg and Guillaume Bourque. Introduction The goal of this practical session is to identify single nucleotide variants (SNVs) in a human genome and to annotate them. In the previous module 3, we have aligned the reads from NA12878 (daughter) in a small region on chromosome 1. We will continue to use the data generated during the Module 3. NA12878 is the child of the trio while NA12891 and NA12892 are her parents. Pedigree For practical reasons we subsampled the reads from the sample because running the whole dataset would take way too much time and resources. We’re going to focus on the reads extracted from a 300 kbp stretch of chromosome 1 Chromosome Start End 1 17704860 18004860 Original Setup Software Requirements These are all already installed, but here are the original links. SAMTools IGV Genome Analysis Toolkit SnpEff In this session, we will particularly focus on GATK HaplotypeCaller SNV detection tool. The main advantage of HaplotypeCaller is to do the calling using a local de-novo assembly approach. When the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. This allow a better accuracy in regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. Environment setup mkdir -p $HOME/workspace/HTG/Module4/ docker run --privileged -v /tmp:/tmp --network host -it -w $PWD -v $HOME:$HOME \\ --user $UID:$GROUPS -v /etc/group:/etc/group -v /etc/passwd:/etc/passwd \\ -v /etc/fonts/:/etc/fonts/ -v /media:/media c3genomics/genpipes:0.8 export WORK_DIR_M4=$HOME/workspace/HTG/Module4/ export REF=$MUGQIC_INSTALL_HOME/genomes/species/Homo_sapiens.GRCh37/ mkdir -p ${WORK_DIR_M4}/bam/NA12878 cd $WORK_DIR_M4 ln -s ~/CourseData/HTG_data/Module4/* . cp $HOME/workspace/HTG/Module3/alignment/NA12878/NA12878.sorted.ba* bam/NA12878 cp $HOME/workspace/HTG/Module3/alignment/NA12878/NA12878.sorted.dup.recal.ba* bam/NA12878 module load mugqic/java/openjdk-jdk1.8.0_72 mugqic/GenomeAnalysisTK/4.1.0.0 mugqic/snpEff/4.3 Data files The initial structure of your folders should look like this: ROOT |-- bam/ # bam file from the previous Module(down sampled) `-- NA12878/ # Child sample directory `-- scripts/ # command lines scripts `-- saved_results/ # precomputed final files Cheat sheets Unix comand line cheat sheet Commands file of this module Input files Let’s look into the NA12878 bam folders. ls bam/NA12878/ Our starting data set consists of 100 bp paired-end Illumina reads from the child (NA12878) that have been aligned to GRCh37 during one of the previous modules (NA12878.sorted.bam). We also have the same data after duplicate removal, indel realignment and base recalibration (NA12878.sorted.dup.recal.bam). 1. Do you know what are the .bai files? solution Calling Variants with GATK If you recall from the previous module, we first mapped the reads to GRCh37 and then we removed duplicate reads and realigned the reads around the indels. Let’s call SNPs in NA12878 using both the original and the improved bam files: mkdir -p variants #NA12878.sort java -Xmx2g -jar $GATK_JAR HaplotypeCaller \\ -R $REF/genome/Homo_sapiens.GRCh37.fa \\ -I bam/NA12878/NA12878.sorted.bam \\ -O variants/NA12878.hc.vcf \\ -L 1:17704860-18004860 #NA12878.sort.rmdup.realign java -Xmx2g -jar $GATK_JAR HaplotypeCaller \\ -R $REF/genome/Homo_sapiens.GRCh37.fa \\ -I bam/NA12878/NA12878.sorted.dup.recal.bam \\ -O variants/NA12878.rmdup.realign.hc.vcf \\ -L 1:17704860-18004860 -Xmx2g instructs java to allow up 2 GB of RAM to be used for GATK. -R specifies which reference sequence to use. -I specifies the input BAM files. -L indicates the reference region where SNP calling should take place Investigating the SNP Calls Use less to take a look at the vcf files: less -S variants/NA12878.rmdup.realign.hc.vcf Vcf is a daunting format at first glance, but you can find some basic information about the format [here](https://www.internationalgenome.org/wiki/Analysis/vcf4.0. Fields vary from caller to caller. Some values are more constant. The ref vs alt alleles, variant quality (QUAL column) and the per-sample genotype (GT) values are almost always there. 1. How do you figure out what the genotype is for each variant? solution 2. Do we have any annotation information yet? solution 3. How many SNPs were found? solution 4. Did we find the same number of variants using the files before and after duplicate removal and realignment? solution Looking for Differences Between the Two VCF Files Use the following command to pull out differences between the two files: diff &lt;(grep -v &quot;^#&quot; variants/NA12878.hc.vcf | cut -f1-2 | sort) \\ &lt;(grep -v &quot;^#&quot; variants/NA12878.rmdup.realign.hc.vcf | cut -f1-2 | sort) 103a104 &gt; 1 17744709 211a213 &gt; 1 17811139 244a247 &gt; 1 17830757 265,266c268,270 &lt; 1 17845333 &lt; 1 17845337 --- &gt; 1 17845298 &gt; 1 17845318 &gt; 1 17845334 274a279 &gt; 1 17850941 303a309 &gt; 1 17875141 308d313 &lt; 1 17879077 5. Is this result concordant to our previous comparison of files before and after duplicate removal and realignment? solution Use IGV to investigate the SNPs The best way to see and understand the differences between the two vcf files will be to look at them in IGV. If you need, the IGV color codes can be found here: [IGV color code by insert size]99(https://igv.org/doc/desktop/) and IGV color code by pair orientation. Option 1: You can view your files (bam and vcf files) in the IGV browser by using the URL for that file. In a browser, like Firefox, type in the server name and all files will be shown there. Find your bam and your vcf files, right click it and ‘copy the link location’. Next, open IGV and select b37 as the reference genome as you did in the visualization module. In IGV, load both the original and the realigned bam files (NA12878.bwa.sort.bam and NA12878.bwa.sort.rmdup.realign.bam) using (File-&gt;Load from URL…). After you have loaded the two bam files, load the two vcf files (NA12878.hc.vcf and NA12878.rmdup.realign.hc.vcf) in the same way. Option 2: Alternatively, you can download all the NA12878.* files in the current directory to your local computer: To do this you can use the procedure that was described previously. Open another terminal and use the scp command to copy your data into your local computer Next, open IGV and select b37 as the reference genome as you did in the visualization module. In IGV, load both the original and the realigned bam files (NA12878.bwa.sort.bam and NA12878.bwa.sort.rmdup.realign.bam) using (File-&gt;Load from file…). After you have loaded the two bam files, load the two vcf files (NA12878.hc.vcf and NA12878.rmdup.realign.hc.vcf) in the same way. Finally, go to a region on chromsome 1 with reads (1:17704860-18004860) and spend some time SNP gazing… 6. Do the SNPs look believable? solution 7. Are there any positions that you think should have been called as a SNP, but weren’t? solution Looking for INDELs INDELs can be found by looking for rows where the reference base column and the alternate base column are different lengths. It’s slightly more complicated than that since, you’ll also pick up the comma delimited alternate bases. Here’s an awk expression that almost picks out the INDELs: grep -v &quot;^#&quot; variants/NA12878.rmdup.realign.hc.vcf \\ | awk &#39;{ if(length($4) != length($5)) { print $0 } }&#39; \\ | less -S You can find a slightly more advanced awk script that separates the SNPs from the INDELs here. 8. Did you find any INDELs? solution 9. Can you find the largest INDEL? solution Filter the Variants Typically variant callers will only perform a minimal amount of filtering when presenting variant calls. To perform more rigorous filtering, another program must be used. In our case, we will use the VariantFiltration tool in GATK. Note The best practice when using GATK is to use the VariantRecalibrator. In our data set, we had too few variants to accurately use the variant recalibrator and therefore we used the VariantFiltration tool instead. java -Xmx2g -jar $GATK_JAR VariantFiltration \\ -R $REF/genome/Homo_sapiens.GRCh37.fa \\ -V variants/NA12878.rmdup.realign.hc.vcf \\ -O variants/NA12878.rmdup.realign.hc.filter.vcf \\ -filter &quot;QD &lt; 2.0&quot; \\ -filter &quot;FS &gt; 200.0&quot; \\ -filter &quot;MQ &lt; 40.0&quot; \\ --filter-name QDFilter \\ --filter-name FSFilter \\ --filter-name MQFilter -Xmx2g instructs java to allow up 2 GB of RAM to be used for GATK. -R specifies which reference sequence to use. -V specifies the input vcf file. -O specifies the output vcf file. -filter defines an expression using the vcf INFO and genotype variables. --filter-name defines what the filter field should display if that filter is true. 1. What is QD, FS, and MQ? solution Adding Functional Consequence The next step in trying to make sense of the variant calls is to assign functional consequence to each variant. At the most basic level, this involves using gene annotations to determine if variants are sense, missense, or nonsense. We typically use SnpEff but many use Annovar and VEP as well. Let’s run snpEff java -Xmx4G -jar $SNPEFF_HOME/snpEff.jar eff \\ -v -no-intergenic \\ -i vcf -o vcf GRCh37.75 variants/NA12878.rmdup.realign.hc.filter.vcf &gt; variants/NA12878.rmdup.realign.hc.filter.snpeff.vcf -Xmx2g instructs java to allow up 4 GB of RAM to be used for snpEff. -v specifies verbose output. -no-intergenic specifies that we want to skip functional consequence testing in intergenic regions. -i and -o specify the input and output file format respectively. In this case, we specify vcf for both. GRCh37.75 specifies that we want to use the GRCh37.75 annotation database. variants/NA12878.rmdup.realign.hc.filter.vcf specifies our input vcf filename variants/NA12878.rmdup.realign.hc.filter.snpeff.vcf specifies our output vcf filename Investigating the Functional Consequence of Variants You can learn more about the meaning of snpEff annotations here. Use less to look at the new vcf file: less -S variants/NA12878.rmdup.realign.hc.filter.snpeff.vcf We can see in the vcf that snpEff added few sections. These are hard to decipher directly from the VCF other tools or scripts, need to be used to make sens of this. The annotation is presented in the INFO field using the new ANN format. For more information on this field see here. Typically, we have: ANN=Allele|Annotation|Putative impact|Gene name|Gene ID|Feature type|Feature ID|Transcript biotype|Rank Total|HGVS.c|... Here’s an example of a typical annotation: ANN=C|intron_variant|MODIFIER|PADI6|PADI6|transcript|NM_207421.4|Coding|5/16|c.553+80T&gt;C|||||| 1. What does the example annotation actually mean? solution Next, you should view or download the report generated by snpEff. Use the procedure described previously to retrieve: snpEff_summary.html Next, open the file in any web browser. Finding Impactful Variants One nice feature in snpEff is that it tries to assess the impact of each variant. You can read more about the effect categories here. 2. How many variants had a high impact? solution 3. How many variants had a moderate impact? solution 4. What effect categories were represented in these variants? solution 5. Open that position in IGV, what do you see? solution Adding dbSNP Annotations Go back to looking at your last vcf file: less -S variants/NA12878.rmdup.realign.hc.filter.snpeff.vcf 1. What do you see in the third column? solution The third column in the vcf file is reserved for identifiers. Perhaps the most common identifier is the dbSNP rsID. Use the following command to generate dbSNP rsIDs for our vcf file: #switch to old GATK 3.8 module unload mugqic/GenomeAnalysisTK/4.1.0.0 module load mugqic/GenomeAnalysisTK/3.8 java -Xmx2g -jar $GATK_JAR -T VariantAnnotator \\ -R $REF/genome/Homo_sapiens.GRCh37.fa \\ --dbsnp $REF/annotations/Homo_sapiens.GRCh37.dbSNP150.vcf.gz \\ -V variants/NA12878.rmdup.realign.hc.filter.snpeff.vcf \\ -o variants/NA12878.rmdup.realign.hc.filter.snpeff.dbsnp.vcf \\ -L 1:17704860-18004860 #return to GATK 4 module unload mugqic/GenomeAnalysisTK/3.8 module load mugqic/GenomeAnalysisTK/4.1.0.0 -Xmx2g instructs java to allow up 2 GB of RAM to be used for GATK. -R specifies which reference sequence to use. --dbsnp specifies the input dbSNP vcf file. This is used as the source for the annotations. -V specifies the input vcf file. -o specifies the output vcf file. -L defines which regions we should annotate. In this case, I chose the chromosomes that contain the regions we are investigating. 2. What percentage of the variants that passed all filters were also in dbSNP? solution 3. Can you find a variant that passed and wasn’t in dbSNP? solution Investigating the Trio (Optional) At this point we have aligned and called variants in one individual. However, we actually have FASTQ and BAM files for three family members! As additional practice, perform the same steps for the other two individuals (her parents): NA12891 and NA12892. Here are some additional things that you might want to look at: 1. If you load up all three realigned BAM files and all three final vcf files into IGV, do the variants look plausible? Use a Punnett square to help evaluate this. i.e. if both parents have a homozygous reference call and the child has a homozygous variant call at that locus, this might indicate a trio conflict. solution 2. Do you find any additional high or moderate impact variants in either of the parents? solution 3. Do all three family members have the same genotype for Rs7538876 and Rs2254135? solution GATK produces even better variant calling results if all three BAM files are specified at the same time (i.e. specifying multiple -I filename options). Try this and then perform the rest of module 4 on the trio vcf file. Does this seem to improve your variant calling results? Does it seem to reduce the trio conflict rate? solution Quit the Container Environment exit Lab Complete! You’re done Module 3! We hope that you enjoyed the lab and that you continue to enjoy Single Nucleotide Variant Calling. "]]
